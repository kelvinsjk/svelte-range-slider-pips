<script>

  import Prism from "svelte-prism";
  import RangeSlider from "svelte-range-slider-pips";
  import Example from "./Components/Example.svelte";
  import Options from "./Components/Options.svx";
  import Steps from "./Components/Steps.svx";


  let values1 = [11];
  let values2 = [25,50,75];
  let minmax1 = [0];
  let minmax2 = [75];
  let minmax3 = [111];
  let step1 = [50];
  let step2 = [-10,10];
  let step3 = [5000];
  let values4 = [50];
  let float1 = [50];
  let float2 = [40,60];
  let pips1 = [50];
  let pips2 = [2];
  let pips3 = [2];
  let range1 = [30,70];
  let range2 = [50];
  let range3 = [50];
  let rangePushy = [30,70];
  let pipstep1 = [50];
  let pipstep2 = [50];
  let pipstep3 = [50];
  let prefix1 = [50];
  let prefix2 = [40,60];
  let prefix3 = [50];
  let formatter1 = [50];
  let formatter2 = [3];
  let formatter3 = [7];
  let formatter4 = [new Date().getDay()];
  let hue = [244];

  const format1 = new Intl.NumberFormat("en-US");
  const moods = ["üòÅ","üòÄ","üòä","üòê","üò•","üò´"];

  $: lightColor = `hsl(${Math.round(hue[0]) - 10}, 65%, 70%)`;
  $: color = `hsl(${Math.round(hue[0])}, 63%, 54%)`;

</script>

<style>

  .soon {
    margin: 4em auto 8em ;
    text-align: center;
  }
  .soon img {
    display: inline-block;
  }
  .credit {
    display: block;
    text-align: right;
  }
  :global(#intro) {
    margin: 2em 4em 4em 0.5em;
  }

</style>

# Svelte Range Slider & Pips

A reactive, accessible, **multi-thumb, range slider component for use in a svelte application**; with the ability to display "pips" or "notches" along the range.

<RangeSlider id="intro" float pips first="label" last="label" />

## Customisation

### Options

Here's a list of all the props (options) that can be passed to the `<RangeSlider />` component
for changing the behaviour/style of it.

<Options />

### Styling

The component can be further styled after the props have been defined by overriding the default
css styling. The best way to do this is to use the `id=""` prop and then scope your global css
with this id.

<Prism language="css">
{`/* main slider element */
 .rangeSlider {}
 .rangeSlider.vertical {}       /* if slider is vertical */
 .rangeSlider.focus {}          /* if slider is focussed */
 .rangeSlider.range {}          /* if slider is a range */
 .rangeSlider.min {}            /* if slider is a min-range */
 .rangeSlider.max {}            /* if slider is a max-range */
 .rangeSlider.pips {}           /* if slider has visible pips */
 .rangeSlider.pip-labels {}     /* if slider has labels for pips */
 /* slider handles */
 .rangeSlider > .rangeHandle {}                 /* positioned wrapper for the handle/float */
 .rangeSlider > .rangeHandle.active {}          /* if a handle is active in any way */
 .rangeSlider > .rangeHandle.press {}           /* if a handle is being pressed down */
 .rangeSlider > .rangeHandle.hoverable {}       /* if the handles allow hover effect */
 .rangeSlider > .rangeHandle > .rangeNub {}     /* the actual nub rendered as a handle */
 .rangeSlider > .rangeHandle > .rangeFloat {}   /* the floating value above the handle */
 /* slider range */
 .rangeSlider > .rangeBar {}                    /* the range between the two handles */
 /* slider pips */
 .rangeSlider > .rangePips {}                   /* the container element for the pips */
 .rangeSlider > .rangePips.focus {}             /* if slider is focussed */
 .rangeSlider > .rangePips.vertical {}          /* if slider is vertical */
 .rangeSlider > .rangePips > .pip {}            /* an individual pip */
 .rangeSlider > .rangePips > .pip.first {}      /* the first pip on the slider */
 .rangeSlider > .rangePips > .pip.last {}       /* the last pip on the slider */
 .rangeSlider > .rangePips > .pip.selected {}   /* if a pip is selected */
 .rangeSlider > .rangePips > .pip.in-range {}   /* if a pip is somewhere in the range */
 .rangeSlider > .rangePips > .pip > .pipVal {}   /* the label for the pip */`}
</Prism>

There's also a bunch of CSS Variables for color-themeing if only color changes
are desired; These won't affect IE, though, so if you're looking for IE support it's
better to completely override the CSS above.

<Prism language="css">
  --range-slider:          #d7dada; /* slider main background color */
 --range-handle-inactive: #99a2a2; /* inactive handle color */
 --range-handle:          #838de7; /* non-focussed handle color */
 --range-handle-focus:    #4a40d4; /* focussed handle color */
 --range-handle-border:   var(--range-handle);
 --range-range-inactive:  var(--range-handle-inactive); /* inactive range bar background color */
 --range-range:           var(--range-handle-focus); /* active range bar background color */
 --range-float-inactive:  var(--range-handle-inactive); /* inactive floating label background color */
 --range-float:           var(--range-handle-focus); /* floating label background color */
 --range-float-text:      white; /* text color on floating label */
</Prism>

## Usage

### Basic Usage

This is how the slider would appear if no props/arguments are passed along with the component.

<Example>
  <div slot="code">{`<RangeSlider />`}</div>
  <div slot="slider"><RangeSlider /></div>
</Example>

### Values

Setting the defualt value(s) is done with `values` which accepts an `Array`. It will accept any
number of values from `1`. The values should be within the given `min` and `max` range. It can
also be bound with `bind:values`

<Example values={values1}>
  <div slot="code">{`<RangeSlider values={[11]} />`}</div>
  <div slot="slider"><RangeSlider bind:values={values1} /></div>
</Example>

<Example values={values2}>
  <div slot="code">{`<RangeSlider values={[25,50,75]} />`}</div>
  <div slot="slider"><RangeSlider bind:values={values2} /></div>
</Example>

### Min & Max

The slider accepts props for `min` and `max` to set the range of the minimum and
maximum possible value respectively.

<Example values={minmax1}>
  <div slot="code">{`<RangeSlider min={-33} max={33} />`}</div>
  <div slot="slider"><RangeSlider min={-33} max={33} bind:values={minmax1} /></div>
</Example>

The slider below has it's `values` property bound with the `min` value for the
slider below that.

<Example values={minmax2}>
  <div slot="code">{`<script> let bound = [75]; </script>

<RangeSlider min={50} bind:values={bound} />`}</div>

  <div slot="slider">
    <RangeSlider min={50} bind:values={minmax2} />
  </div>
</Example>

<Example values={minmax3}>
  <div slot="code">{`<!-- bound = [${minmax2}] -->
 <RangeSlider min={bound[0]} max={200} values={[111]} />`}</div>
  <div slot="slider">
    <RangeSlider min={minmax2[0]} max={200} bind:values={minmax3} />
  </div>
</Example>

### Steps

Although the slider values are clamped between the `min` and `max` properties, there may be
times when we'd like to limit the selectable `values`. This can be done with `step` which is
a modulus of the possible `values` range.

<Example values={step1}>
  <div slot="code">{`<RangeSlider step={5} />`}</div>
  <div slot="slider"><RangeSlider step={5} bind:values={step1} /></div>
</Example>

<Example values={step3}>
  <div slot="code">{`<RangeSlider step={1000} values={[5000]} min={-10000} max={10000} />`}</div>
  <div slot="slider"><RangeSlider step={1000} min={-10000} max={10000} bind:values={step3} /></div>
</Example>

As seen below; handles will always align to the `step` value, even if set incorrectly at
initialisation. And the handles will always start at the `min` value and end on the `max` value.

<Example values={step2}>
  <div slot="code">{`<RangeSlider step={7} values={[-10,10]} min={-20} max={23} />`}</div>
  <div slot="slider"><RangeSlider step={7} min={-20} max={23} bind:values={step2} /></div>
</Example>

### Ranges

A stand-out feature which makes this component somewhat better than the standard
`<input type="range">` is the `range` property which allows **two values** to display a selected
range between them and also prevent the values from going past each other.

<Example values={range1}>
  <div slot="code">{`<RangeSlider range values={[30,70]} />`}</div>
  <div slot="slider"><RangeSlider range bind:values={range1} /></div>
</Example>

The property `range` can also be `"min"` or `"max"` instead of a `boolean`, which will create
the visual appearance of a slider range which is growing or shrinking.

<Example values={range2}>
  <div slot="code">{`<RangeSlider range="min" values={[50]} />`}</div>
  <div slot="slider"><RangeSlider range="min" bind:values={range2} /></div>
</Example>

<Example values={range3}>
  <div slot="code">{`<RangeSlider range="max" values={[50]} />`}</div>
  <div slot="slider"><RangeSlider range="max" bind:values={range3} /></div>
</Example>

#### Pushy Range

When applying a range the two **handles are not allowed to pass each other**,
and by default they will block each other from moving. But applying the `pushy`
property to the slider **will allow each handle to push the other one along**
when they collide.

<Example values={rangePushy}>
  <div slot="code">{`<RangeSlider range pushy values={[30,70]} />`}</div>
  <div slot="slider">
    <table class="middle">
      <tr>
        <td width=100><h5><code>Pushy</code></h5></td>
        <td><RangeSlider range pushy bind:values={rangePushy} /></td>
      </tr>
      <tr>
        <td width=100><h5>Not <code>Pushy</code></h5></td>
        <td><RangeSlider range bind:values={rangePushy} /></td>
      </tr>
    </table>
  </div>
</Example>


### With floating label

By passing the `float` prop to the component, we can have a nice label which floats above
the handle and shows the current value. _(hover/select to see it)_

<Example values={float1}>
  <div slot="code">{`<RangeSlider float />`}</div>
  <div slot="slider"><RangeSlider float bind:values={float1} /></div>
</Example>

<Example values={float2}>
  <div slot="code">{`<RangeSlider float hover={false} values={[40,60]} />`}</div>
  <div slot="slider"><RangeSlider float hover={false} bind:values={float2} /></div>
</Example>

### With Pips

And here, to demonstrate another stand-out feature are some notches, or as I call
them `pips` which sit below the slider by default to mark regular intervals in the range.

<Example values={pips1}>
  <div slot="code">{`<RangeSlider pips />`}</div>
  <div slot="slider"><RangeSlider pips bind:values={pips1} /></div>
</Example>

<Example values={pips2}>
  <div slot="code">{`<RangeSlider pips max={5} />`}</div>
  <div slot="slider"><RangeSlider pips max={5} bind:values={pips2} /></div>
</Example>

### Pip Labels

There are props for `all`, `first`, `last` and `rest` which determine how to display the pips
along the range. These props can be a `Boolean` or `"label"` to show a label with the pip.

<Example>
  <div slot="code">{`<RangeSlider pips all rest={false} />`}</div>
  <div slot="slider"><RangeSlider pips all rest={false} /></div>
</Example>

<Example>
  <div slot="code">{`<RangeSlider pips first='label' last='label' />`}</div>
  <div slot="slider"><RangeSlider pips first='label' last='label' /></div>
</Example>

<Example>
  <div slot="code">{`<RangeSlider pips first='label' last={false} rest={false} />`}</div>
  <div slot="slider"><RangeSlider pips first='label' last={false} rest={false} /></div>
</Example>

<Example>
  <div slot="code">{`<RangeSlider pips all='label' />`}</div>
  <div slot="slider"><RangeSlider pips all='label' /></div>
</Example>

### Pip Steps

It is not always desirable to show every single value as a `pip` on the range, and so
this option works much in the same way as `step` but only affects the rendering of the
pips.

By default, the `pipstep` is set to 1/20 of the range of values (`max - min`), so for a slider
with `min=0` and `max=100` the `pipstep` would be `5`

<Example values={pipstep1}>
  <div slot="code">{`<!-- using default pipstep -->
 <RangeSlider pips />`}</div>
  <div slot="slider"><RangeSlider pips all="label" bind:values={pipstep1} /></div>
</Example>

<Example values={pipstep2}>
  <div slot="code">{`<RangeSlider pips pipstep={20} />`}</div>
  <div slot="slider"><RangeSlider pips pipstep={20} all="label" bind:values={pipstep2} /></div>
</Example>

<Example values={pipstep3}>
  <div slot="code">{`<RangeSlider pips step={2.5} pipstep={10} />`}</div>
  <div slot="slider"><RangeSlider pips step={2.5} pipstep={10} all="label" bind:values={pipstep3} /></div>
</Example>

It'd be quite bad for performance to display too many pips as they each represent
an individual DOM node. Also there are only so many pixels on a screen. So use the
`pipstep` feature to aesthetically limit the amount of pips rendered to screen.

#### Styling example for pips

Additional control can be had over the display of pips [by using css' `nth-child()` property.](#styling-example-for-pips)

<Example values={pips3} css active="css">
  <div slot="code">{`<RangeSlider pips id="reverse-pips" max={50} />`}</div>
  <div slot="css">{`#reverse-pips .rangePips {
   bottom: auto;
   top: -1em;
 }
 #reverse-pips .pip {
   background: rgb(198, 187, 224);
   top: auto;
   bottom: 0.25em;
   width: 2px;
   transform: translateX(-1px);
   transition-duration: 0.5s;
   opacity: 0.7;
 }
 #reverse-pips .pip:nth-child(5n+1) {
   height: 0.8em;
   opacity: 0.9;
 }
 #reverse-pips .pip:nth-child(5n),
 #reverse-pips .pip:nth-child(5n+2) {
   height: 0.65em;
 }
 #reverse-pips .pip.selected {
   background: rgb(255, 0, 157);
   transition-duration: 0.05s;
   opacity: 1;
 }`}</div>
  <div slot="slider"><RangeSlider pips id="reverse-pips" max={50} bind:values={pips3} /></div>
</Example>

#### `step` and `pipstep` interaction

See the table below for examples of how different `step` and `pipstep` values interact.
<Steps />

### Prefixes and Suffixes

When rendering the labels (on handle, and pips) both for screen and readers; the values
can be prefixed or suffixed with a string to add context to the values.

<Example values={prefix1}>
  <div slot="code">{`<RangeSlider prefix="‚Ç¨" />`}</div>
  <div slot="slider"><RangeSlider step={10} pips float all="label" prefix="‚Ç¨" bind:values={prefix1} /></div>
</Example>

<Example values={prefix2}>
  <div slot="code">{`<RangeSlider suffix="%" />`}</div>
  <div slot="slider"><RangeSlider step={10} pips float all="label" suffix="%" bind:values={prefix2} /></div>
</Example>

<Example values={prefix3}>
  <div slot="code">{`<RangeSlider prefix="~" suffix=" üéà" />`}</div>
  <div slot="slider"><RangeSlider step={1} pips float last="label" prefix="~" suffix=" üéà" bind:values={prefix3} max={99} /></div>
</Example>

### Formatter

If a more complicated way of rendering labels is required, and `prefix`/`suffix` cannot
accomplish the desired result, then it's possible to define a `formatter` which accepts
a function with the argument of the current value.

<Example values={formatter1}>
  <div slot="code">{`<script>
   // use the Intl formatter to add the correct number notation
   const num = new Intl.NumberFormat("en-US");
 </script>
 <RangeSlider step={10} formatter={ v => num.format(v * 1000) } />`}</div>
  <div slot="slider"><RangeSlider formatter={ v => format1.format(v * 1000) } pips float all="label" step={10} bind:values={formatter1} /></div>
</Example>

<Example>
  <div slot="code">{`<script>
  const moods = ["üòÅ","üòÄ","üòä","üòê","üò•","üò´"];
 </script>
   
 <RangeSlider bind:values formatter={ v => moods[v] } max={moods.length-1} /> 
  
 <p>{moods[values[0]]}</p>`}</div>  
  <div slot="slider">
    <RangeSlider formatter={ v => moods[v] } max={moods.length-1} pips all="label" bind:values={formatter2} />
    <p style="font-size: 2em; text-align: center;">{moods[formatter2[0]]}</p>
  </div>
</Example>

`handleFormatter` can be used additionally to format the handle in a different
way to the pip labels.

<Example values={formatter3}>
  <div slot="code">{`<RangeSlider formatter={ v => v + "¬≤" } handleFormatter={ v => v * v } />`}</div>
  <div slot="slider"><RangeSlider formatter={ v => v + "¬≤" } handleFormatter={ v => v * v } pips float all="label" max={15} bind:values={formatter3} /></div>
</Example>


## Fancy Examples

Here's a bunch of examples to give ideas of how to use the different options/styles.

### Color Shifting Slider

Using CSS variables bound to the input values for shifting the colours.

<Example values={hue} css active="code">
  <div slot="code">{`<script>
    let hue = [244];
    $: lightColor = \`hsl(\${Math.round(hue[0]) - 10}, 65%, 70%)\`;
    $: color = \`hsl(\${Math.round(hue[0])}, 63%, 54%)\`;
  </script>  
  
  <div style="--range-handle-focus: {color}; --range-range: {lightColor}">
   <RangeSlider id="color-pips" bind:values={hue} 
      range="min" max={360} pips pipstep={36} first={false} last={false} 
    />
  </div>`}</div>

  <div slot="css">{`#color-pips {
  height: 13px;
}
#color-pips .rangeBar {
  height: 13px;
}
#color-pips .rangeHandle {
  top: 7px;
  height: 30px;
  width: 30px;
}
#color-pips .rangeHandle .rangeNub {
  border: 3px solid rgb(246, 252, 255);
}
#color-pips .rangePips {
  bottom: -3px;
  z-index: 1;
}
#color-pips .rangePips .pip {
  background: rgb(246, 252, 255);
  border-radius: 10px;
  width: 5px;
  height: 5px;
  transform: translateX(-50%);
}
#color-pips .rangePips .pip.in-range {
  background: rgb(0, 0, 0);
  opacity: 0.35;
}`}</div>
  <div slot="slider" style="--range-handle-focus: {color}; --range-range: {lightColor}">
    <RangeSlider id="color-pips" bind:values={hue} 
      range="min" max={360} pips pipstep={36} first={false} last={false}  />
  </div>
</Example>




---

<div class="soon">

![icon of a magnifying glass, for viewing the output slider](public/images/icons8-under-construction-100.png)  
 More coming soon

</div>

<small class="credit">
  <a target="_blank" href="https://icons8.com/icons/set/search">Search</a>, <a target="_blank" href="https://icons8.com/icons/set/code">Code</a> and other icons by <a target="_blank" href="https://icons8.com">Icons8</a>
</small>
