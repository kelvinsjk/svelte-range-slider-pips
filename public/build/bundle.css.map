{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../RangePips.svelte",
    "../../RangeSlider.svelte",
    "../../App.svelte",
    "../../Example.svelte",
    "../../Options.svx",
    "../../Steps.svx",
    "../../Docs.svx"
  ],
  "sourcesContent": [
    "<script>\n\n  // range slider props\n  export let range = false;\n  export let min = 0;\n  export let max = 100;\n  export let step = 1;\n  export let values = [(max + min) / 2];\n  export let vertical = false;\n\n  // range pips / values props\n  export let pipstep = undefined;\n  export let all = true;\n  export let first = undefined;\n  export let last = undefined;\n  export let rest = undefined;\n\n  // formatting props\n  export let prefix = \"\";\n  export let suffix = \"\";\n  export let formatter = v => v;\n\n  // stylistic props\n  export let focus = undefined;\n  export let percentOf = undefined;\n\n  $: pipStep = pipstep || ((max - min) / step >= ( vertical ? 50 : 100 ) ? (max - min) / ( vertical ? 10 : 20 ) : 1);\n\n  $: pipCount = parseInt((max - min) / (step * pipStep), 10);\n\n  $: pipVal = function(val) {\n    return min + val * step * pipStep;\n  };\n\n  $: isSelected = function(val) {\n    return values.some(v => v === val);\n  };\n\n  $: inRange = function(val) {\n    if (range === \"min\") {\n      return values[0] > val;\n    } else if (range === \"max\") {\n      return values[0] < val;\n    } else if (range) {\n      return values[0] < val && values[1] > val;\n    }\n  };\n</script>\n\n<style>\n  :global(.rangeSlider) {\n    --pip: var(--range-pip, lightslategray);\n    --pip-text: var(--range-pip-text, var(--pip));\n    --pip-active: var(--range-pip-active, darkslategrey);\n    --pip-active-text: var(--range-pip-active-text, var(--pip-active));\n    --pip-in-range: var(--range-pip-in-range, var(--pip-active));\n    --pip-in-range-text: var(--range-pip-in-range-text, var(--pip-active-text));\n  }\n  :global(.rangePips) {\n    position: absolute;\n    height: 1em;\n    left: 0;\n    right: 0;\n    bottom: -1em;\n  }\n  :global(.rangePips.vertical) {\n    height: auto;\n    width: 1em;\n    left: 100%;\n    right: auto;\n    top: 0;\n    bottom: 0;\n  }\n  :global(.rangePips .pip) {\n    height: 0.4em;\n    position: absolute;\n    top: 0.25em;\n    width: 1px;\n    white-space: nowrap;\n  }\n  :global(.rangePips.vertical .pip) {\n    height: 1px;\n    width: 0.4em;\n    top: 0;\n    left: 0.25em;\n  }\n  :global(.rangePips .pip.selected) {\n    height: 0.75em;\n  }\n  :global(.rangePips.vertical .pip.selected) {\n    height: 1px;\n    width: 0.75em;\n  }\n  :global(.rangePips .pipVal) {\n    position: absolute;\n    top: 0.4em;\n    transform: translate(-50%, 25%);\n  }\n  :global(.rangePips.vertical .pipVal) {\n    position: absolute;\n    top: 0;\n    left: 0.4em;\n    transform: translate(25%, -50%);\n  }\n  :global(.rangePips .pip.selected .pipVal) {\n    font-weight: bold;\n    top: 0.75em;\n  }\n  :global(.rangePips.vertical .pip.selected .pipVal) {\n    top: 0;\n    left: 0.75em;\n  }\n  :global(.rangePips .pip, .rangePips .pipVal) {\n    transition: all 0.15s ease;\n  }\n  :global(.rangePips .pip) {\n    color: lightslategray;\n    color: var(--pip-text);\n    background-color: lightslategray;\n    background-color: var(--pip);\n  }\n  :global(.rangePips .pip.selected) {\n    color: darkslategrey;\n    color: var(--pip-active-text);\n    background-color: darkslategrey;\n    background-color: var(--pip-active);\n  }\n  :global(.rangePips .pip.in-range) {\n    color: darkslategrey;\n    color: var(--pip-in-range-text);\n    background-color: darkslategrey;\n    background-color: var(--pip-in-range);\n  }\n</style>\n\n<div class=\"rangePips\" class:focus class:vertical>\n  {#if ( all && first !== false ) || first }\n    <span\n      class=\"pip first\"\n      class:selected={isSelected(min)}\n      class:in-range={inRange(min)}\n      style=\"{vertical ? 'top' : 'left'}: 0%;\">\n      {#if all === 'label' || first === 'label'}\n        <span class=\"pipVal\">\n          {prefix}{formatter(min)}{suffix}\n        </span>\n      {/if}\n    </span>\n  {/if}\n  {#if ( all && rest !== false ) || rest}\n    {#each Array(pipCount + 1) as _, i}\n      {#if pipVal(i) !== min && pipVal(i) !== max}\n        <span\n          class=\"pip\"\n          class:selected={isSelected(pipVal(i))}\n          class:in-range={inRange(pipVal(i))}\n          style=\"{vertical ? 'top' : 'left'}: {percentOf(pipVal(i))}%;\">\n          {#if all === 'label' || rest === 'label'}\n            <span class=\"pipVal\">\n              {prefix}{formatter(pipVal(i))}{suffix}\n            </span>\n          {/if}\n        </span>\n      {/if}\n    {/each}\n  {/if}\n  {#if ( all && last !== false ) || last}\n    <span\n      class=\"pip last\"\n      class:selected={isSelected(max)}\n      class:in-range={inRange(max)}\n      style=\"{vertical ? 'top' : 'left'}: 100%;\">\n      {#if all === 'label' || last === 'label'}\n        <span class=\"pipVal\">\n          {prefix}{formatter(max)}{suffix}\n        </span>\n      {/if}\n    </span>\n  {/if}\n</div>\n",
    "<script>\n  import { spring } from \"svelte/motion\";\n  import RangePips from \"./RangePips.svelte\";\n\n  // range slider props\n  export let range = false;\n  export let pushy = false;\n  export let min = 0;\n  export let max = 100;\n  export let step = 1;\n  export let values = [(max + min) / 2];\n  export let vertical = false;\n  export let float = false;\n  export let hover = true;\n\n  // range pips / values props\n  export let pips = false;\n  export let pipstep = undefined;\n  export let all = undefined;\n  export let first = undefined;\n  export let last = undefined;\n  export let rest = undefined;\n\n  // formatting props\n  export let id = undefined;\n  export let prefix = \"\";\n  export let suffix = \"\";\n  export let formatter = (v) => v;\n  export let handleFormatter = formatter;\n\n  // stylistic props\n  export let precision = 2;\n  export let springValues = { stiffness: 0.15, damping: 0.4 };\n\n  // dom references\n  let slider;\n\n  // state management\n  let focus = false;\n  let handleActivated = false;\n  let handlePressed = false;\n  let keyboardActive = false;\n  let activeHandle = values.length - 1;\n\n  // save spring-tweened copies of the values for use\n  // when changing values and animating the handle/range nicely\n  let springPositions = spring(\n    values.map((v) =>\n      parseFloat((((v - min) / (max - min)) * 100).toFixed(precision))\n    ),\n    springValues\n  );\n\n  // watch the values array, and trim / clamp the values to the steps\n  // and boundaries set up in the slider on change\n  $: values = trimRange(values).map((v) => alignValueToStep(v));\n\n  // update the spring function so that movement can happen in the UI\n  $: {\n    springPositions.set(values.map((v) => percentOf(v)));\n  }\n\n  /**\n   * take in a value, and then calculate that value's percentage\n   * of the overall range (min-max);\n   * @param {number} val the value we're getting percent for\n   * @return {number} the percentage value\n   **/\n  $: percentOf = function (val) {\n    let perc = ((val - min) / (max - min)) * 100;\n    if (perc >= 100) {\n      return 100;\n    } else if (perc <= 0) {\n      return 0;\n    } else {\n      return parseFloat(perc.toFixed(precision));\n    }\n  };\n\n  /**\n   * clamp a value from the range so that it always\n   * falls within the min/max values\n   * @param {number} val the value to clamp\n   * @return {number} the value after it's been clamped\n   **/\n  $: clampValue = function (val) {\n    // return the min/max if outside of that range\n    return val <= min ? min : val >= max ? max : val;\n  };\n\n  /**\n   * align the value with the steps so that it\n   * always sits on the closest (above/below) step\n   * @param {number} val the value to align\n   * @return {number} the value after it's been aligned\n   **/\n  $: alignValueToStep = function (val) {\n    // sanity check for performance\n    if (val <= min) {\n      return min;\n    } else if (val >= max) {\n      return max;\n    }\n\n    // find the middle-point between steps\n    // and see if the value is closer to the\n    // next step, or previous step\n    let remainder = (val - min) % step;\n    let aligned = val - remainder;\n    if (Math.abs(remainder) * 2 >= step) {\n      aligned += remainder > 0 ? step : -step;\n    }\n    // make sure the value is within acceptable limits\n    aligned = clampValue(aligned);\n    // make sure the returned value is set to the precision desired\n    // this is also because javascript often returns weird floats\n    // when dealing with odd numbers and percentages\n\n    return parseFloat(aligned.toFixed(precision));\n  };\n\n  /**\n   * helper func to get the index of an element in it's DOM container\n   * @param {object} el dom object reference we want the index of\n   * @returns {number} the index of the input element\n   **/\n  function index(el) {\n    if (!el) return -1;\n    var i = 0;\n    while ((el = el.previousElementSibling)) {\n      i++;\n    }\n    return i;\n  }\n\n  /**\n   * noramlise a mouse or touch event to return the\n   * client (x/y) object for that event\n   * @param {event} e a mouse/touch event to normalise\n   * @returns {object} normalised event client object (x,y)\n   **/\n  function normalisedClient(e) {\n    if (e.type.includes(\"touch\")) {\n      return e.touches[0];\n    } else {\n      return e;\n    }\n  }\n\n  /**\n   * get the position (x/y) of a mouse/touch event on the screen\n   * @param {event} e a mouse/touch event\n   * @returns {object} position on screen (x,y)\n   **/\n  function eventPosition(e) {\n    return vertical ? normalisedClient(e).clientY : normalisedClient(e).clientX;\n  }\n\n  /**\n   * check if an element is a handle on the slider\n   * @param {object} el dom object reference we want to check\n   * @returns {boolean}\n   **/\n  function targetIsHandle(el) {\n    const handles = slider.querySelectorAll(\".handle\");\n    const isHandle = Array.prototype.includes.call(handles, el);\n    const isChild = Array.prototype.some.call(handles, (e) => e.contains(el));\n    return isHandle || isChild;\n  }\n\n  /**\n   * take in the value from the \"range\" parameter and see if\n   * we should make a min/max/range slider.\n   * @param {array} values the input values for the rangeSlider\n   * @return {array} the range array for creating a rangeSlider\n   **/\n  function trimRange(values) {\n    if (range === \"min\" || range === \"max\") {\n      return values.slice(0, 1);\n    } else if (range) {\n      return values.slice(0, 2);\n    } else {\n      return values;\n    }\n  }\n\n  /**\n   * helper to return the slider dimensions for finding\n   * the closest handle to user interaction\n   * @return {object} the range slider DOM client rect\n   **/\n  function getSliderDimensions() {\n    return slider.getBoundingClientRect();\n  }\n\n  /**\n   * helper to return closest handle to user interaction\n   * @param {number} clientPos the pixel (clientX/Y) to check against\n   * @return {number} the index of the closest handle to clientPos\n   **/\n  function getClosestHandle(clientPos) {\n    // first make sure we have the latest dimensions\n    // of the slider, as it may have changed size\n    const dims = getSliderDimensions();\n    // calculate the interaction position, percent and value\n    let iPos = 0;\n    let iPercent = 0;\n    let iVal = 0;\n    if (vertical) {\n      iPos = clientPos - dims.top;\n      iPercent = (iPos / dims.height) * 100;\n      iVal = ((max - min) / 100) * iPercent + min;\n    } else {\n      iPos = clientPos - dims.left;\n      iPercent = (iPos / dims.width) * 100;\n      iVal = ((max - min) / 100) * iPercent + min;\n    }\n\n    let closest;\n\n    // if we have a range, and the handles are at the same\n    // position, we want a simple check if the interaction\n    // value is greater than return the second handle\n    if (range === true && values[0] === values[1]) {\n      if (iVal > values[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n      // if there are multiple handles, and not a range, then\n      // we sort the handles values, and return the first one closest\n      // to the interaction value\n    } else {\n      closest = values.indexOf(\n        [...values].sort((a, b) => Math.abs(iVal - a) - Math.abs(iVal - b))[0]\n      );\n    }\n    return closest;\n  }\n\n  /**\n   * take the interaction position on the slider, convert\n   * it to a value on the range, and then send that value\n   * through to the moveHandle() method to set the active\n   * handle's position\n   * @param {number} clientPos the clientX/Y of the interaction\n   **/\n  function handleInteract(clientPos) {\n    // first make sure we have the latest dimensions\n    // of the slider, as it may have changed size\n    const dims = getSliderDimensions();\n    // calculate the interaction position, percent and value\n    let iPos = 0;\n    let iPercent = 0;\n    let iVal = 0;\n    if (vertical) {\n      iPos = clientPos - dims.top;\n      iPercent = (iPos / dims.height) * 100;\n      iVal = ((max - min) / 100) * iPercent + min;\n    } else {\n      iPos = clientPos - dims.left;\n      iPercent = (iPos / dims.width) * 100;\n      iVal = ((max - min) / 100) * iPercent + min;\n    }\n    // move handle to the value\n    moveHandle(activeHandle, iVal);\n  }\n\n  /**\n   * move a handle to a specific value, respecting the clamp/align rules\n   * @param {number} index the index of the handle we want to move\n   * @param {number} value the value to move the handle to\n   * @return {number} the value that was moved to (after alignment/clamping)\n   **/\n  function moveHandle(index, value) {\n    if (range) {\n      // restrict the handles of a range-slider from\n      // going past one-another unless \"pushy\" is true\n      if (index === 0 && value > values[1]) {\n        if (pushy) {\n          values[1] = value;\n        } else {\n          value = values[1];\n        }\n      } else if (index === 1 && value < values[0]) {\n        if (pushy) {\n          values[0] = value;\n        } else {\n          value = values[0];\n        }\n      }\n    }\n    // set the value for the handle, and align/clamp it\n    values[index] = value;\n  }\n\n  /**\n   * helper to find the beginning range value for use with css style\n   * @param {array} values the input values for the rangeSlider\n   * @return {number} the beginning of the range\n   **/\n  function rangeStart(values) {\n    if (range === \"min\") {\n      return 0;\n    } else {\n      return values[0];\n    }\n  }\n\n  /**\n   * helper to find the ending range value for use with css style\n   * @param {array} values the input values for the rangeSlider\n   * @return {number} the end of the range\n   **/\n  function rangeEnd(values) {\n    if (range === \"max\") {\n      return 0;\n    } else if (range === \"min\") {\n      return 100 - values[0];\n    } else {\n      return 100 - values[1];\n    }\n  }\n\n  /**\n   * when the user has unfocussed (blurred) from the\n   * slider, deactivated all handles\n   * @param {event} e the event from browser\n   **/\n  function sliderBlurHandle(e) {\n    if (keyboardActive) {\n      focus = false;\n      handleActivated = false;\n      handlePressed = false;\n    }\n  }\n\n  /**\n   * when the user focusses the handle of a slider\n   * set it to be active\n   * @param {event} e the event from browser\n   **/\n  function sliderFocusHandle(e) {\n    activeHandle = index(e.target);\n    focus = true;\n  }\n\n  /**\n   * handle the keyboard accessible features by checking the\n   * input type, and modfier key then moving handle by appropriate amount\n   * @param {event} e the event from browser\n   **/\n  function sliderKeydown(e) {\n    const handle = index(e.target);\n    let jump = e.ctrlKey || e.metaKey || e.shiftKey ? step * 10 : step;\n    let prevent = false;\n\n    switch (e.key) {\n      case \"PageDown\":\n        jump *= 10;\n      case \"ArrowRight\":\n      case \"ArrowUp\":\n        moveHandle(handle, values[handle] + jump);\n        prevent = true;\n        break;\n      case \"PageUp\":\n        jump *= 10;\n      case \"ArrowLeft\":\n      case \"ArrowDown\":\n        moveHandle(handle, values[handle] - jump);\n        prevent = true;\n        break;\n      case \"Home\":\n        moveHandle(handle, min);\n        prevent = true;\n        break;\n      case \"End\":\n        moveHandle(handle, max);\n        prevent = true;\n        break;\n    }\n    if (prevent) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n  /**\n   * function to run when the user touches\n   * down on the slider element anywhere\n   * @param {event} e the event from browser\n   **/\n  function sliderInteractStart(e) {\n    const p = eventPosition(e);\n    // set the closest handle as active\n    focus = true;\n    handleActivated = true;\n    handlePressed = true;\n    activeHandle = getClosestHandle(p);\n    // for touch devices we want the handle to instantly\n    // move to the position touched for more responsive feeling\n    if (e.type === \"touchstart\") {\n      handleInteract(p);\n    }\n  }\n\n  /**\n   * function to run when the user stops touching\n   * down on the slider element anywhere\n   * @param {event} e the event from browser\n   **/\n  function sliderInteractEnd(e) {\n    handlePressed = false;\n  }\n\n  /**\n   * unfocus the slider if the user clicked off of\n   * it, somewhere else on the screen\n   * @param {event} e the event from browser\n   **/\n  function bodyInteractStart(e) {\n    keyboardActive = false;\n    if (focus && e.target !== slider && !slider.contains(e.target)) {\n      focus = false;\n    }\n  }\n\n  /**\n   * send the clientX through to handle the interaction\n   * whenever the user moves acros screen while active\n   * @param {event} e the event from browser\n   **/\n  function bodyInteract(e) {\n    if (handleActivated) {\n      handleInteract(eventPosition(e));\n    }\n  }\n\n  /**\n   * if user triggers mouseup on the body while\n   * a handle is active (without moving) then we\n   * trigger an interact event there\n   * @param {event} e the event from browser\n   **/\n  function bodyMouseUp(e) {\n    const el = e.target;\n    // this only works if a handle is active, which can\n    // only happen if there was sliderInteractStart triggered\n    // on the slider, already\n    if (handleActivated && (el === slider || slider.contains(el))) {\n      focus = true;\n      if (!targetIsHandle(el)) {\n        handleInteract(eventPosition(e));\n      }\n    }\n    handleActivated = false;\n    handlePressed = false;\n  }\n\n  /**\n   * if user triggers touchend on the body then we\n   * defocus the slider completely\n   * @param {event} e the event from browser\n   **/\n  function bodyTouchEnd(e) {\n    handleActivated = false;\n    handlePressed = false;\n  }\n\n  function bodyKeyDown(e) {\n    if (e.target === slider || slider.contains(e.target)) {\n      keyboardActive = true;\n    }\n  }\n</script>\n\n<style>\n  :global(.rangeSlider) {\n    --slider: var(--range-slider, #d7dada);\n    --handle-inactive: var(--range-handle-inactive, #99a2a2);\n    --handle: var(--range-handle, #838de7);\n    --handle-focus: var(--range-handle-focus, #4a40d4);\n    --handle-border: var(--range-handle-border, var(--handle));\n    --range-inactive: var(--range-range-inactive, var(--handle-inactive));\n    --range: var(--range-range, var(--handle-focus));\n    --float-inactive: var(--range-float-inactive, var(--handle-inactive));\n    --float: var(--range-float, var(--handle-focus));\n    --float-text: var(--range-float-text, white);\n  }\n  :global(.rangeSlider) {\n    position: relative;\n    border-radius: 100px;\n    height: 0.5em;\n    margin: 1em;\n  }\n  :global(.rangeSlider, .rangeSlider *) {\n    user-select: none;\n  }\n  :global(.rangeSlider.pips) {\n    margin-bottom: 1.8em;\n  }\n  :global(.rangeSlider.pip-labels) {\n    margin-bottom: 2.8em;\n  }\n  :global(.rangeSlider.vertical) {\n    display: inline-block;\n    border-radius: 100px;\n    width: 0.5em;\n    min-height: 200px;\n  }\n  :global(.rangeSlider.vertical.pips) {\n    margin-right: 1.8em;\n    margin-bottom: 1em;\n  }\n  :global(.rangeSlider.vertical.pip-labels) {\n    margin-right: 2.8em;\n    margin-bottom: 1em;\n  }\n  :global(.rangeSlider .rangeHandle) {\n    position: absolute;\n    display: block;\n    height: 1.4em;\n    width: 1.4em;\n    top: 0.25em;\n    left: 0.25em;\n    transform: translateY(-50%) translateX(-50%);\n    z-index: 2;\n  }\n  :global(.rangeSlider .rangeNub),\n  :global(.rangeSlider .rangeHandle:before) {\n    position: absolute;\n    left: 0;\n    top: 0;\n    display: block;\n    border-radius: 10em;\n    height: 100%;\n    width: 100%;\n    transition: all 0.2s ease;\n  }\n  :global(.rangeSlider .rangeHandle:before) {\n    content: \"\";\n    left: 1px;\n    top: 1px;\n    bottom: 1px;\n    right: 1px;\n    height: auto;\n    width: auto;\n    box-shadow: 0 0 0 0px var(--handle-border);\n    opacity: 0;\n  }\n  :global(.rangeSlider .rangeHandle.hoverable:hover:before) {\n    box-shadow: 0 0 0 8px var(--handle-border);\n    opacity: 0.2;\n  }\n  :global(.rangeSlider .rangeHandle.hoverable.press:before),\n  :global(.rangeSlider .rangeHandle.hoverable.press:hover:before) {\n    box-shadow: 0 0 0 12px var(--handle-border);\n    opacity: 0.4;\n  }\n  :global(.rangeSlider.range:not(.min):not(.max) .rangeNub) {\n    border-radius: 10em 10em 10em 1.6em;\n  }\n  :global(.rangeSlider.range .rangeHandle:nth-of-type(1) .rangeNub) {\n    transform: rotate(-135deg);\n  }\n  :global(.rangeSlider.range .rangeHandle:nth-of-type(2) .rangeNub) {\n    transform: rotate(45deg);\n  }\n  :global(.rangeSlider.range.vertical .rangeHandle:nth-of-type(1) .rangeNub) {\n    transform: rotate(-45deg);\n  }\n  :global(.rangeSlider.range.vertical .rangeHandle:nth-of-type(2) .rangeNub) {\n    transform: rotate(135deg);\n  }\n  :global(.rangeSlider .rangeFloat) {\n    display: block;\n    position: absolute;\n    left: 50%;\n    top: -0.5em;\n    transform: translate(-50%, -100%);\n    font-size: 1em;\n    text-align: center;\n    opacity: 0;\n    pointer-events: none;\n    white-space: nowrap;\n    transition: all 0.2s ease;\n    font-size: 0.9em;\n    padding: 0.2em 0.4em;\n    border-radius: 0.2em;\n  }\n  :global(.rangeSlider .rangeHandle.active .rangeFloat),\n  :global(.rangeSlider .rangeHandle.hoverable:hover .rangeFloat) {\n    opacity: 1;\n    top: -0.2em;\n    transform: translate(-50%, -100%);\n  }\n  :global(.rangeSlider .rangeBar) {\n    position: absolute;\n    display: block;\n    transition: background 0.2s ease;\n    border-radius: 1em;\n    height: 0.5em;\n    top: 0;\n    user-select: none;\n    z-index: 1;\n  }\n  :global(.rangeSlider.vertical .rangeBar) {\n    width: 0.5em;\n    height: auto;\n  }\n  :global(.rangeSlider) {\n    background-color: #d7dada;\n    background-color: var(--slider);\n  }\n  :global(.rangeSlider .rangeBar) {\n    background-color: #99a2a2;\n    background-color: var(--range-inactive);\n  }\n  :global(.rangeSlider.focus .rangeBar) {\n    background-color: #838de7;\n    background-color: var(--range);\n  }\n  :global(.rangeSlider .rangeNub) {\n    background-color: #99a2a2;\n    background-color: var(--handle-inactive);\n  }\n  :global(.rangeSlider.focus .rangeNub) {\n    background-color: #838de7;\n    background-color: var(--handle);\n  }\n  :global(.rangeSlider .rangeHandle.active .rangeNub) {\n    background-color: #4a40d4;\n    background-color: var(--handle-focus);\n  }\n  :global(.rangeSlider .rangeFloat) {\n    color: white;\n    color: var(--float-text);\n    background-color: #99a2a2;\n    background-color: var(--float-inactive);\n  }\n  :global(.rangeSlider.focus .rangeFloat) {\n    background-color: #4a40d4;\n    background-color: var(--float);\n  }\n</style>\n\n<div\n  {id}\n  bind:this={slider}\n  class=\"rangeSlider\"\n  class:range\n  class:vertical\n  class:focus\n  class:min={range === 'min'}\n  class:max={range === 'max'}\n  class:pips\n  class:pip-labels={all === 'label' || first === 'label' || last === 'label' || rest === 'label'}\n  on:touchstart|preventDefault={sliderInteractStart}\n  on:mousedown={sliderInteractStart}\n  on:touchend|preventDefault={sliderInteractEnd}\n  on:mouseup={sliderInteractEnd}>\n  {#each values as value, index}\n    <span\n      role=\"slider\"\n      tabindex=\"0\"\n      class=\"rangeHandle\"\n      class:hoverable={hover}\n      class:active={focus && activeHandle === index}\n      class:press={handlePressed && activeHandle === index}\n      on:blur={sliderBlurHandle}\n      on:focus={sliderFocusHandle}\n      on:keydown={sliderKeydown}\n      style=\"{vertical ? 'top' : 'left'}: {$springPositions[index]}%; z-index: {activeHandle === index ? 3 : 2};\"\n      aria-valuemin={range === true && index === 1 ? values[0] : min}\n      aria-valuemax={range === true && index === 0 ? values[1] : max}\n      aria-valuenow={value}\n      aria-valuetext=\"{prefix}{handleFormatter(value)}{suffix}\"\n      aria-orientation={vertical ? 'vertical' : 'horizontal'}>\n      <span class=\"rangeNub\" />\n      {#if float}\n        <span class=\"rangeFloat\">{prefix}{handleFormatter(value)}{suffix}</span>\n      {/if}\n    </span>\n  {/each}\n  {#if range}\n    <span\n      class=\"rangeBar\"\n      style=\"{vertical ? 'top' : 'left'}: {rangeStart($springPositions)}%; {vertical ? 'bottom' : 'right'}:\n      {rangeEnd($springPositions)}%;\" />\n  {/if}\n  {#if pips}\n    <RangePips\n      {values}\n      {min}\n      {max}\n      {step}\n      {range}\n      {vertical}\n      {all}\n      {first}\n      {last}\n      {rest}\n      {pipstep}\n      {prefix}\n      {suffix}\n      {formatter}\n      {focus}\n      {percentOf} />\n  {/if}\n</div>\n\n<svelte:window\n  on:mousedown={bodyInteractStart}\n  on:touchstart={bodyInteractStart}\n  on:mousemove={bodyInteract}\n  on:touchmove={bodyInteract}\n  on:mouseup={bodyMouseUp}\n  on:touchend={bodyTouchEnd}\n  on:keydown={bodyKeyDown} />\n",
    "<script>\n  import Docs from \"./Docs.svx\";\n</script>\n\n<style>\n  main {\n    max-width: 80em;\n    margin: auto;\n    padding: 1rem;\n  }\n</style>\n\n<main>\n\n  <Docs />\n\n</main>\n",
    "<script>\n  import Prism from \"svelte-prism\";\n  import RangeSlider from \"svelte-range-slider-pips\";\n\n  export let active = \"code\";\n  export let code = true;\n  export let css = false;\n  export let values;\n\n</script>\n\n<style>\n  .example + .example,\n  p + .example {\n    margin: 2em 0 0;\n  }\n  .tabs {\n    padding: 0 1em;\n    display: flex;\n    align-content: center;\n    position: relative;\n  }\n  .tabs.hide {\n    display: none;\n  }\n  .tabs.border:after {\n    content: \"\";\n    position: absolute;\n    left: 5px;\n    right: 5px;\n    bottom: -1px;\n    height: 1px;\n    background: #434d5a;\n  }\n  .tab {\n    padding: 0.5em 1.5em;\n    margin-right: 2px;\n    border-radius: 5px 5px 0 0;\n    cursor: pointer;\n    transition: all 0.2s ease;\n  }\n  .tab:hover {\n    background: rgba(67, 77, 91, 0.1);\n  }\n  .tab.active {\n    background: #434d5a;\n  }\n  .tabs img {\n    width: 24px;\n    display: block;\n  }\n  .slot {\n    display: none;\n  }\n  .slot.active,\n  .slot.slider {\n    display: block;\n  }\n  .slider {\n    padding: 2em .5em;\n  }\n  .values {\n    font-size: 0.875em;\n    text-align: right;\n    display: block;\n  }\n  .values code {\n    color: rgb(255, 0, 76);\n  }\n  .example :global(pre) {\n    margin: 0;\n  }\n</style>\n\n<section class=\"example\">\n\n  <div class=\"tabs border\" class:hide={ !css }>\n\n    <div\n      class=\"tab tab-code\"\n      class:active={active === 'code'}\n      on:click={() => {\n        active = 'code';\n      }}>\n      <img\n        src=\"public/images/icons8-svelte-100.png\"\n        alt=\"icon of the svelte logo, for viewing the input code\" />\n    </div>\n\n    <div\n      class=\"tab tab-css\"\n      class:active={active === 'css'}\n      on:click={() => {\n        active = 'css';\n      }}>\n      <img\n        src=\"public/images/icons8-css3-100.png\"\n        alt=\"icon of the css3 logo, for viewing the css code\" />\n    </div>\n\n  </div>\n\n  <div class=\"slots\">\n\n    <div class=\"slot code\" class:active={active === 'code'}>\n\n      {#if code}\n      <Prism language=\"svelte\">\n        <slot name=\"code\"></slot>\n      </Prism>\n      {/if}\n\n    </div>\n\n    <div class=\"slot css\" class:active={active === 'css'}>\n\n      {#if css}\n      <Prism language=\"css\">\n        <slot name=\"css\"></slot>\n      </Prism>\n      {/if}\n\n    </div>\n\n    <div class=\"slot slider\">\n\n      <slot name=\"slider\" v={values}>\n        <RangeSlider  />\n      </slot>\n\n      {#if values}\n      <span class=\"values\">values: <code>[{values}]</code></span>\n      {/if}\n\n    </div>\n\n  </div>\n\n</section>\n",
    "<div class=\"table-wrapper\">\n<table>\n<thead>\n<tr>\n<th align=\"left\">prop</th>\n<th align=\"left\">type</th>\n<th align=\"left\">default</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>values</strong></td>\n<td align=\"left\"><code>Array</code></td>\n<td align=\"left\"><code>[50]</code></td>\n<td>Array of values to apply on the slider. Multiple values creates multiple handles. (<em><strong>note:</strong> A slider with <code>range</code> property set can only have two values max</em>)</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>min</strong></td>\n<td align=\"left\"><code>Number</code></td>\n<td align=\"left\"><code>0</code></td>\n<td>Minimum value for the slider</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>max</strong></td>\n<td align=\"left\"><code>Number</code></td>\n<td align=\"left\"><code>100</code></td>\n<td>Maximum value for the slider</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>step</strong></td>\n<td align=\"left\"><code>Number</code></td>\n<td align=\"left\"><code>1</code></td>\n<td>Every <code>nth</code> value to allow handle to stop at</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>range</strong></td>\n<td align=\"left\"><code>Boolean</code>/<code>String</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>Whether to style as a range picker. Use <code>range='min'</code> or <code>range='max'</code> for min/max variants</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>pushy</strong></td>\n<td align=\"left\"><code>Boolean</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>If range is true, then this boolean decides if the active handle will push the dormant one along</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>float</strong></td>\n<td align=\"left\"><code>Boolean</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>Set true to add a floating label above focussed handles</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>hoverable</strong></td>\n<td align=\"left\"><code>Boolean</code></td>\n<td align=\"left\"><code>true</code></td>\n<td>Whether to allow hover effects (and floating labels) to show on hover</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>vertical</strong></td>\n<td align=\"left\"><code>Boolean</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>Make the slider render vertically</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>pips</strong></td>\n<td align=\"left\"><code>Boolean</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>Whether to show pips/notches on the slider</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>pipstep</strong></td>\n<td align=\"left\"><code>Number</code></td>\n<td align=\"left\"><code>1</code>/<code>10</code>/<code>20</code></td>\n<td>Every <code>nth</code> step to show a pip for. This has multiple defaults depending on <code>values</code> property</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>all</strong></td>\n<td align=\"left\"><code>Boolean</code>/<code>String</code></td>\n<td align=\"left\"><code>true</code></td>\n<td>Whether to show a pip or label for all the slider values. Use <code>all='label'</code> to show a labels</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>first</strong></td>\n<td align=\"left\"><code>Boolean</code>/<code>String</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>Whether to show a pip or label for the first value on slider. Use <code>first='label'</code> to show a label value</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>last</strong></td>\n<td align=\"left\"><code>Boolean</code>/<code>String</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>Whether to show a pip or label for the last value on slider. Use <code>last='label'</code> to show a label value</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>rest</strong></td>\n<td align=\"left\"><code>Boolean</code>/<code>String</code></td>\n<td align=\"left\"><code>false</code></td>\n<td>Whether to show a pip or label for the all other values. Use <code>rest='label'</code> to show a label value</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>prefix</strong></td>\n<td align=\"left\"><code>String</code></td>\n<td align=\"left\"><code>\"\"</code></td>\n<td>A string to prefix to all displayed values</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>suffix</strong></td>\n<td align=\"left\"><code>String</code></td>\n<td align=\"left\"><code>\"\"</code></td>\n<td>A string to suffix to all displayed values</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>formatter</strong></td>\n<td align=\"left\"><code>Function</code></td>\n<td align=\"left\"><code>(v) =&gt; v</code></td>\n<td>A function to re-format values before they are displayed</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>handleFormatter</strong></td>\n<td align=\"left\"><code>Function</code></td>\n<td align=\"left\"><code>formatter</code></td>\n<td>A function to re-format values on the handle/float before they are displayed. Defaults to the same function given to the <code>formatter</code> property</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>springValues</strong></td>\n<td align=\"left\"><code>Object</code></td>\n<td align=\"left\"><code>&#123; stiffness: 0.15, damping: 0.4 &#125;</code></td>\n<td>Svelte spring physics object to change the behaviour of the handle when moving</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>id</strong></td>\n<td align=\"left\"><code>String</code></td>\n<td align=\"left\"><code>undefined</code></td>\n<td>Provide an optional <code>id</code> attribute to the component for styling/other reasons</td>\n</tr>\n</tbody>\n</table>\n</div>\n<style>\n\n  tbody td:first-child {\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco,\n    Consolas, monospace;\n  }\n\n</style>",
    "<script>\n  \n  import RangeSlider from \"svelte-range-slider-pips\";\n\n</script>\n<div class=\"table-wrapper\">\n<table>\n<thead>\n<tr>\n<th align=\"left\"><code>step=&#123;𝑛&#125;</code></th>\n<th align=\"left\"><code>pipstep=&#123;𝑛&#125;</code></th>\n<th align=\"left\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>1</code></td>\n<td align=\"left\"><code>1</code></td>\n<td align=\"left\"><RangeSlider step={1} pipstep={1} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>2.5</code></td>\n<td align=\"left\"><code>1</code></td>\n<td align=\"left\"><RangeSlider step={2.5} pipstep={1} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>5</code></td>\n<td align=\"left\"><code>1</code></td>\n<td align=\"left\"><RangeSlider step={5} pipstep={1} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>1</code></td>\n<td align=\"left\"><code>2</code></td>\n<td align=\"left\"><RangeSlider step={1} pipstep={2} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>2.5</code></td>\n<td align=\"left\"><code>2</code></td>\n<td align=\"left\"><RangeSlider step={2.5} pipstep={2} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>3</code></td>\n<td align=\"left\"><code>2</code></td>\n<td align=\"left\"><RangeSlider step={3} pipstep={2} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>5</code></td>\n<td align=\"left\"><code>2</code></td>\n<td align=\"left\"><RangeSlider step={5} pipstep={2} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>0.5</code></td>\n<td align=\"left\"><code>5</code></td>\n<td align=\"left\"><RangeSlider step={0.5} pipstep={5} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>1</code></td>\n<td align=\"left\"><code>5</code></td>\n<td align=\"left\"><RangeSlider step={1} pipstep={5} max={20} pips all float /></td>\n</tr>\n<tr>\n<td align=\"left\"><code>3</code></td>\n<td align=\"left\"><code>5</code></td>\n<td align=\"left\"><RangeSlider step={3} pipstep={5} max={20} pips all float /></td>\n</tr>\n</tbody>\n</table>\n</div>\n<style>\n\n  table td {\n    vertical-align: middle;\n  }\n  \n  td:nth-child(1),\n  td:nth-child(2) {\n    width: 100px;\n  }\n\n</style>",
    "<script>\n\n  import Prism from \"svelte-prism\";\n  import RangeSlider from \"svelte-range-slider-pips\";\n  import Example from \"./Components/Example.svelte\";\n  import Options from \"./Components/Options.svx\";\n  import Steps from \"./Components/Steps.svx\";\n\n\n  let values1 = [11];\n  let values2 = [25,50,75];\n  let minmax1 = [0];\n  let minmax2 = [75];\n  let minmax3 = [111];\n  let step1 = [50];\n  let step2 = [-10,10];\n  let step3 = [5000];\n  let values4 = [50];\n  let float1 = [50];\n  let float2 = [40,60];\n  let pips1 = [50];\n  let pips2 = [2];\n  let pips3 = [2];\n  let range1 = [30,70];\n  let range2 = [50];\n  let range3 = [50];\n  let rangePushy = [30,70];\n  let pipstep1 = [50];\n  let pipstep2 = [50];\n  let pipstep3 = [50];\n  let prefix1 = [50];\n  let prefix2 = [40,60];\n  let prefix3 = [50];\n  let formatter1 = [50];\n  let formatter2 = [3];\n  let formatter3 = [7];\n  let formatter4 = [new Date().getDay()];\n  let hue = [244];\n\n  const format1 = new Intl.NumberFormat(\"en-US\");\n  const moods = [\"😁\",\"😀\",\"😊\",\"😐\",\"😥\",\"😫\"];\n\n  $: lightColor = `hsl(${Math.round(hue[0]) - 10}, 65%, 70%)`;\n  $: color = `hsl(${Math.round(hue[0])}, 63%, 54%)`;\n\n</script>\n<style>\n\n  .soon {\n    margin: 4em auto 8em ;\n    text-align: center;\n  }\n  .soon img {\n    display: inline-block;\n  }\n  .credit {\n    display: block;\n    text-align: right;\n  }\n  :global(#intro) {\n    margin: 2em 4em 4em 0.5em;\n  }\n\n</style>\n<h1 id=\"svelte-range-slider--pips\"><a href=\"#svelte-range-slider--pips\">Svelte Range Slider & Pips</a></h1>\n<p>A reactive, accessible, <strong>multi-thumb, range slider component for use in a svelte application</strong>; with the ability to display “pips” or “notches” along the range.</p>\n<RangeSlider id=\"intro\" float pips first=\"label\" last=\"label\" />\n<h2 id=\"customisation\"><a href=\"#customisation\">Customisation</a></h2>\n<h3 id=\"options\"><a href=\"#options\">Options</a></h3>\n<p>Here’s a list of all the props (options) that can be passed to the <code>&lt;RangeSlider /&gt;</code> component\nfor changing the behaviour/style of it.</p>\n<Options />\n<h3 id=\"styling\"><a href=\"#styling\">Styling</a></h3>\n<p>The component can be further styled after the props have been defined by overriding the default\ncss styling. The best way to do this is to use the <code>id=\"\"</code> prop and then scope your global css\nwith this id.</p>\n<Prism language=\"css\">\n{`/* main slider element */\n .rangeSlider {}\n .rangeSlider.vertical {}       /* if slider is vertical */\n .rangeSlider.focus {}          /* if slider is focussed */\n .rangeSlider.range {}          /* if slider is a range */\n .rangeSlider.min {}            /* if slider is a min-range */\n .rangeSlider.max {}            /* if slider is a max-range */\n .rangeSlider.pips {}           /* if slider has visible pips */\n .rangeSlider.pip-labels {}     /* if slider has labels for pips */\n /* slider handles */\n .rangeSlider > .rangeHandle {}                 /* positioned wrapper for the handle/float */\n .rangeSlider > .rangeHandle.active {}          /* if a handle is active in any way */\n .rangeSlider > .rangeHandle.press {}           /* if a handle is being pressed down */\n .rangeSlider > .rangeHandle.hoverable {}       /* if the handles allow hover effect */\n .rangeSlider > .rangeHandle > .rangeNub {}     /* the actual nub rendered as a handle */\n .rangeSlider > .rangeHandle > .rangeFloat {}   /* the floating value above the handle */\n /* slider range */\n .rangeSlider > .rangeBar {}                    /* the range between the two handles */\n /* slider pips */\n .rangeSlider > .rangePips {}                   /* the container element for the pips */\n .rangeSlider > .rangePips.focus {}             /* if slider is focussed */\n .rangeSlider > .rangePips.vertical {}          /* if slider is vertical */\n .rangeSlider > .rangePips > .pip {}            /* an individual pip */\n .rangeSlider > .rangePips > .pip.first {}      /* the first pip on the slider */\n .rangeSlider > .rangePips > .pip.last {}       /* the last pip on the slider */\n .rangeSlider > .rangePips > .pip.selected {}   /* if a pip is selected */\n .rangeSlider > .rangePips > .pip.in-range {}   /* if a pip is somewhere in the range */\n .rangeSlider > .rangePips > .pip > .pipVal {}   /* the label for the pip */`}\n</Prism>\n<p>There’s also a bunch of CSS Variables for color-themeing if only color changes\nare desired; These won’t affect IE, though, so if you’re looking for IE support it’s\nbetter to completely override the CSS above.</p>\n<Prism language=\"css\">\n  --range-slider:          #d7dada; /* slider main background color */\n --range-handle-inactive: #99a2a2; /* inactive handle color */\n --range-handle:          #838de7; /* non-focussed handle color */\n --range-handle-focus:    #4a40d4; /* focussed handle color */\n --range-handle-border:   var(--range-handle);\n --range-range-inactive:  var(--range-handle-inactive); /* inactive range bar background color */\n --range-range:           var(--range-handle-focus); /* active range bar background color */\n --range-float-inactive:  var(--range-handle-inactive); /* inactive floating label background color */\n --range-float:           var(--range-handle-focus); /* floating label background color */\n --range-float-text:      white; /* text color on floating label */\n</Prism>\n<h2 id=\"usage\"><a href=\"#usage\">Usage</a></h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\">Basic Usage</a></h3>\n<p>This is how the slider would appear if no props/arguments are passed along with the component.</p>\n<Example>\n  <div slot=\"code\">{`<RangeSlider />`}</div>\n  <div slot=\"slider\"><RangeSlider /></div>\n</Example>\n<h3 id=\"values\"><a href=\"#values\">Values</a></h3>\n<p>Setting the defualt value(s) is done with <code>values</code> which accepts an <code>Array</code>. It will accept any\nnumber of values from <code>1</code>. The values should be within the given <code>min</code> and <code>max</code> range. It can\nalso be bound with <code>bind:values</code></p>\n<Example values={values1}>\n  <div slot=\"code\">{`<RangeSlider values={[11]} />`}</div>\n  <div slot=\"slider\"><RangeSlider bind:values={values1} /></div>\n</Example>\n<Example values={values2}>\n  <div slot=\"code\">{`<RangeSlider values={[25,50,75]} />`}</div>\n  <div slot=\"slider\"><RangeSlider bind:values={values2} /></div>\n</Example>\n<h3 id=\"min--max\"><a href=\"#min--max\">Min & Max</a></h3>\n<p>The slider accepts props for <code>min</code> and <code>max</code> to set the range of the minimum and\nmaximum possible value respectively.</p>\n<Example values={minmax1}>\n  <div slot=\"code\">{`<RangeSlider min={-33} max={33} />`}</div>\n  <div slot=\"slider\"><RangeSlider min={-33} max={33} bind:values={minmax1} /></div>\n</Example>\n<p>The slider below has it’s <code>values</code> property bound with the <code>min</code> value for the\nslider below that.</p>\n<Example values={minmax2}>\n  <div slot=\"code\">{`<script> let bound = [75]; </script>\n<RangeSlider min={50} bind:values={bound} />`}</div>\n  <div slot=\"slider\">\n    <RangeSlider min={50} bind:values={minmax2} />\n  </div>\n</Example>\n<Example values={minmax3}>\n  <div slot=\"code\">{`<!-- bound = [${minmax2}] -->\n <RangeSlider min={bound[0]} max={200} values={[111]} />`}</div>\n  <div slot=\"slider\">\n    <RangeSlider min={minmax2[0]} max={200} bind:values={minmax3} />\n  </div>\n</Example>\n<h3 id=\"steps\"><a href=\"#steps\">Steps</a></h3>\n<p>Although the slider values are clamped between the <code>min</code> and <code>max</code> properties, there may be\ntimes when we’d like to limit the selectable <code>values</code>. This can be done with <code>step</code> which is\na modulus of the possible <code>values</code> range.</p>\n<Example values={step1}>\n  <div slot=\"code\">{`<RangeSlider step={5} />`}</div>\n  <div slot=\"slider\"><RangeSlider step={5} bind:values={step1} /></div>\n</Example>\n<Example values={step3}>\n  <div slot=\"code\">{`<RangeSlider step={1000} values={[5000]} min={-10000} max={10000} />`}</div>\n  <div slot=\"slider\"><RangeSlider step={1000} min={-10000} max={10000} bind:values={step3} /></div>\n</Example>\n<p>As seen below; handles will always align to the <code>step</code> value, even if set incorrectly at\ninitialisation. And the handles will always start at the <code>min</code> value and end on the <code>max</code> value.</p>\n<Example values={step2}>\n  <div slot=\"code\">{`<RangeSlider step={7} values={[-10,10]} min={-20} max={23} />`}</div>\n  <div slot=\"slider\"><RangeSlider step={7} min={-20} max={23} bind:values={step2} /></div>\n</Example>\n<h3 id=\"ranges\"><a href=\"#ranges\">Ranges</a></h3>\n<p>A stand-out feature which makes this component somewhat better than the standard\n<code>&lt;input type=\"range\"&gt;</code> is the <code>range</code> property which allows <strong>two values</strong> to display a selected\nrange between them and also prevent the values from going past each other.</p>\n<Example values={range1}>\n  <div slot=\"code\">{`<RangeSlider range values={[30,70]} />`}</div>\n  <div slot=\"slider\"><RangeSlider range bind:values={range1} /></div>\n</Example>\n<p>The property <code>range</code> can also be <code>\"min\"</code> or <code>\"max\"</code> instead of a <code>boolean</code>, which will create\nthe visual appearance of a slider range which is growing or shrinking.</p>\n<Example values={range2}>\n  <div slot=\"code\">{`<RangeSlider range=\"min\" values={[50]} />`}</div>\n  <div slot=\"slider\"><RangeSlider range=\"min\" bind:values={range2} /></div>\n</Example>\n<Example values={range3}>\n  <div slot=\"code\">{`<RangeSlider range=\"max\" values={[50]} />`}</div>\n  <div slot=\"slider\"><RangeSlider range=\"max\" bind:values={range3} /></div>\n</Example>\n<h4 id=\"pushy-range\"><a href=\"#pushy-range\">Pushy Range</a></h4>\n<p>When applying a range the two <strong>handles are not allowed to pass each other</strong>,\nand by default they will block each other from moving. But applying the <code>pushy</code>\nproperty to the slider <strong>will allow each handle to push the other one along</strong>\nwhen they collide.</p>\n<Example values={rangePushy}>\n  <div slot=\"code\">{`<RangeSlider range pushy values={[30,70]} />`}</div>\n  <div slot=\"slider\">\n    <table class=\"middle\">\n      <tr>\n        <td width=100><h5><code>Pushy</code></h5></td>\n        <td><RangeSlider range pushy bind:values={rangePushy} /></td>\n      </tr>\n      <tr>\n        <td width=100><h5>Not <code>Pushy</code></h5></td>\n        <td><RangeSlider range bind:values={rangePushy} /></td>\n      </tr>\n    </table>\n  </div>\n</Example>\n<h3 id=\"with-floating-label\"><a href=\"#with-floating-label\">With floating label</a></h3>\n<p>By passing the <code>float</code> prop to the component, we can have a nice label which floats above\nthe handle and shows the current value. <em>(hover/select to see it)</em></p>\n<Example values={float1}>\n  <div slot=\"code\">{`<RangeSlider float />`}</div>\n  <div slot=\"slider\"><RangeSlider float bind:values={float1} /></div>\n</Example>\n<Example values={float2}>\n  <div slot=\"code\">{`<RangeSlider float hover={false} values={[40,60]} />`}</div>\n  <div slot=\"slider\"><RangeSlider float hover={false} bind:values={float2} /></div>\n</Example>\n<h3 id=\"with-pips\"><a href=\"#with-pips\">With Pips</a></h3>\n<p>And here, to demonstrate another stand-out feature are some notches, or as I call\nthem <code>pips</code> which sit below the slider by default to mark regular intervals in the range.</p>\n<Example values={pips1}>\n  <div slot=\"code\">{`<RangeSlider pips />`}</div>\n  <div slot=\"slider\"><RangeSlider pips bind:values={pips1} /></div>\n</Example>\n<Example values={pips2}>\n  <div slot=\"code\">{`<RangeSlider pips max={5} />`}</div>\n  <div slot=\"slider\"><RangeSlider pips max={5} bind:values={pips2} /></div>\n</Example>\n<h3 id=\"pip-labels\"><a href=\"#pip-labels\">Pip Labels</a></h3>\n<p>There are props for <code>all</code>, <code>first</code>, <code>last</code> and <code>rest</code> which determine how to display the pips\nalong the range. These props can be a <code>Boolean</code> or <code>\"label\"</code> to show a label with the pip.</p>\n<Example>\n  <div slot=\"code\">{`<RangeSlider pips all rest={false} />`}</div>\n  <div slot=\"slider\"><RangeSlider pips all rest={false} /></div>\n</Example>\n<Example>\n  <div slot=\"code\">{`<RangeSlider pips first='label' last='label' />`}</div>\n  <div slot=\"slider\"><RangeSlider pips first='label' last='label' /></div>\n</Example>\n<Example>\n  <div slot=\"code\">{`<RangeSlider pips first='label' last={false} rest={false} />`}</div>\n  <div slot=\"slider\"><RangeSlider pips first='label' last={false} rest={false} /></div>\n</Example>\n<Example>\n  <div slot=\"code\">{`<RangeSlider pips all='label' />`}</div>\n  <div slot=\"slider\"><RangeSlider pips all='label' /></div>\n</Example>\n<h3 id=\"pip-steps\"><a href=\"#pip-steps\">Pip Steps</a></h3>\n<p>It is not always desirable to show every single value as a <code>pip</code> on the range, and so\nthis option works much in the same way as <code>step</code> but only affects the rendering of the\npips.</p>\n<p>By default, the <code>pipstep</code> is set to 1/20 of the range of values (<code>max - min</code>), so for a slider\nwith <code>min=0</code> and <code>max=100</code> the <code>pipstep</code> would be <code>5</code></p>\n<Example values={pipstep1}>\n  <div slot=\"code\">{`<!-- using default pipstep -->\n <RangeSlider pips />`}</div>\n  <div slot=\"slider\"><RangeSlider pips all=\"label\" bind:values={pipstep1} /></div>\n</Example>\n<Example values={pipstep2}>\n  <div slot=\"code\">{`<RangeSlider pips pipstep={20} />`}</div>\n  <div slot=\"slider\"><RangeSlider pips pipstep={20} all=\"label\" bind:values={pipstep2} /></div>\n</Example>\n<Example values={pipstep3}>\n  <div slot=\"code\">{`<RangeSlider pips step={2.5} pipstep={10} />`}</div>\n  <div slot=\"slider\"><RangeSlider pips step={2.5} pipstep={10} all=\"label\" bind:values={pipstep3} /></div>\n</Example>\n<p>It’d be quite bad for performance to display too many pips as they each represent\nan individual DOM node. Also there are only so many pixels on a screen. So use the\n<code>pipstep</code> feature to aesthetically limit the amount of pips rendered to screen.</p>\n<h4 id=\"styling-example-for-pips\"><a href=\"#styling-example-for-pips\">Styling example for pips</a></h4>\n<p>Additional control can be had over the display of pips <a\n  href=\"#styling-example-for-pips\"\n>by using css’ <code>nth-child()</code> property.</a></p>\n<Example values={pips3} css active=\"css\">\n  <div slot=\"code\">{`<RangeSlider pips id=\"reverse-pips\" max={50} />`}</div>\n  <div slot=\"css\">{`#reverse-pips .rangePips {\n   bottom: auto;\n   top: -1em;\n }\n #reverse-pips .pip {\n   background: rgb(198, 187, 224);\n   top: auto;\n   bottom: 0.25em;\n   width: 2px;\n   transform: translateX(-1px);\n   transition-duration: 0.5s;\n   opacity: 0.7;\n }\n #reverse-pips .pip:nth-child(5n+1) {\n   height: 0.8em;\n   opacity: 0.9;\n }\n #reverse-pips .pip:nth-child(5n),\n #reverse-pips .pip:nth-child(5n+2) {\n   height: 0.65em;\n }\n #reverse-pips .pip.selected {\n   background: rgb(255, 0, 157);\n   transition-duration: 0.05s;\n   opacity: 1;\n }`}</div>\n  <div slot=\"slider\"><RangeSlider pips id=\"reverse-pips\" max={50} bind:values={pips3} /></div>\n</Example>\n<h4 id=\"step-and-pipstep-interaction\"><a href=\"#step-and-pipstep-interaction\"><code>step</code> and <code>pipstep</code> interaction</a></h4>\n<p>See the table below for examples of how different <code>step</code> and <code>pipstep</code> values interact.</p>\n<Steps />\n<h3 id=\"prefixes-and-suffixes\"><a href=\"#prefixes-and-suffixes\">Prefixes and Suffixes</a></h3>\n<p>When rendering the labels (on handle, and pips) both for screen and readers; the values\ncan be prefixed or suffixed with a string to add context to the values.</p>\n<Example values={prefix1}>\n  <div slot=\"code\">{`<RangeSlider prefix=\"€\" />`}</div>\n  <div slot=\"slider\"><RangeSlider step={10} pips float all=\"label\" prefix=\"€\" bind:values={prefix1} /></div>\n</Example>\n<Example values={prefix2}>\n  <div slot=\"code\">{`<RangeSlider suffix=\"%\" />`}</div>\n  <div slot=\"slider\"><RangeSlider step={10} pips float all=\"label\" suffix=\"%\" bind:values={prefix2} /></div>\n</Example>\n<Example values={prefix3}>\n  <div slot=\"code\">{`<RangeSlider prefix=\"~\" suffix=\" 🎈\" />`}</div>\n  <div slot=\"slider\"><RangeSlider step={1} pips float last=\"label\" prefix=\"~\" suffix=\" 🎈\" bind:values={prefix3} max={99} /></div>\n</Example>\n<h3 id=\"formatter\"><a href=\"#formatter\">Formatter</a></h3>\n<p>If a more complicated way of rendering labels is required, and <code>prefix</code>/<code>suffix</code> cannot\naccomplish the desired result, then it’s possible to define a <code>formatter</code> which accepts\na function with the argument of the current value.</p>\n<Example values={formatter1}>\n  <div slot=\"code\">{`<script>\n   // use the Intl formatter to add the correct number notation\n   const num = new Intl.NumberFormat(\"en-US\");\n </script>\n <RangeSlider step={10} formatter={ v => num.format(v * 1000) } />`}</div>\n  <div slot=\"slider\"><RangeSlider formatter={ v => format1.format(v * 1000) } pips float all=\"label\" step={10} bind:values={formatter1} /></div>\n</Example>\n<Example>\n  <div slot=\"code\">{`<script>\n  const moods = [\"😁\",\"😀\",\"😊\",\"😐\",\"😥\",\"😫\"];\n </script>\n   \n <RangeSlider bind:values formatter={ v => moods[v] } max={moods.length-1} /> \n  \n <p>{moods[values[0]]}</p>`}</div>  \n  <div slot=\"slider\">\n    <RangeSlider formatter={ v => moods[v] } max={moods.length-1} pips all=\"label\" bind:values={formatter2} />\n    <p style=\"font-size: 2em; text-align: center;\">{moods[formatter2[0]]}</p>\n  </div>\n</Example>\n<p><code>handleFormatter</code> can be used additionally to format the handle in a different\nway to the pip labels.</p>\n<Example values={formatter3}>\n  <div slot=\"code\">{`<RangeSlider formatter={ v => v + \"²\" } handleFormatter={ v => v * v } />`}</div>\n  <div slot=\"slider\"><RangeSlider formatter={ v => v + \"²\" } handleFormatter={ v => v * v } pips float all=\"label\" max={15} bind:values={formatter3} /></div>\n</Example>\n<h2 id=\"fancy-examples\"><a href=\"#fancy-examples\">Fancy Examples</a></h2>\n<p>Here’s a bunch of examples to give ideas of how to use the different options/styles.</p>\n<h3 id=\"color-shifting-slider\"><a href=\"#color-shifting-slider\">Color Shifting Slider</a></h3>\n<p>Using CSS variables bound to the input values for shifting the colours.</p>\n<Example values={hue} css active=\"code\">\n  <div slot=\"code\">{`<script>\n    let hue = [244];\n    $: lightColor = \\`hsl(\\${Math.round(hue[0]) - 10}, 65%, 70%)\\`;\n    $: color = \\`hsl(\\${Math.round(hue[0])}, 63%, 54%)\\`;\n  </script>  \n  \n  <div style=\"--range-handle-focus: {color}; --range-range: {lightColor}\">\n   <RangeSlider id=\"color-pips\" bind:values={hue} \n      range=\"min\" max={360} pips pipstep={36} first={false} last={false} \n    />\n  </div>`}</div>\n  <div slot=\"css\">{`#color-pips {\n  height: 13px;\n}\n#color-pips .rangeBar {\n  height: 13px;\n}\n#color-pips .rangeHandle {\n  top: 7px;\n  height: 30px;\n  width: 30px;\n}\n#color-pips .rangeHandle .rangeNub {\n  border: 3px solid rgb(246, 252, 255);\n}\n#color-pips .rangePips {\n  bottom: -3px;\n  z-index: 1;\n}\n#color-pips .rangePips .pip {\n  background: rgb(246, 252, 255);\n  border-radius: 10px;\n  width: 5px;\n  height: 5px;\n  transform: translateX(-50%);\n}\n#color-pips .rangePips .pip.in-range {\n  background: rgb(0, 0, 0);\n  opacity: 0.35;\n}`}</div>\n  <div slot=\"slider\" style=\"--range-handle-focus: {color}; --range-range: {lightColor}\">\n    <RangeSlider id=\"color-pips\" bind:values={hue} \n      range=\"min\" max={360} pips pipstep={36} first={false} last={false}  />\n  </div>\n</Example>\n<hr>\n<div class=\"soon\">\n<p><img\n  src=\"public/images/icons8-under-construction-100.png\"\n  alt=\"icon of a magnifying glass, for viewing the output slider\"\n><br>\nMore coming soon</p>\n</div>\n<small class=\"credit\">\n  <a target=\"_blank\" href=\"https://icons8.com/icons/set/search\">Search</a>, <a target=\"_blank\" href=\"https://icons8.com/icons/set/code\">Code</a> and other icons by <a target=\"_blank\" href=\"https://icons8.com\">Icons8</a>\n</small>"
  ],
  "names": [],
  "mappings": "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"
}